# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
# alt - h : yabai -m window --focus west

# swap managed window
# shift + alt - h : yabai -m window --swap north

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# Space focus next/prev
# rcmd - right : yabai -m space --focus next
# rcmd - left : yabai -m space --focus prev
# - Move windows
# rcmd + shift - right : yabai -m window --space next; yabai -m space --focus next
# rcmd + shift - left : yabai -m window --space prev; yabai -m space --focus prev

# Move window to a new space
shift + rcmd - n : yabai -m space --create && \
                  index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                  yabai -m window --space "${index}" && \
                  yabai -m space --focus "${index}"

# Focus a space
rcmd - 1    : yabai -m space --focus   01_space_iterm
rcmd - 2    : yabai -m space --focus   02_space_notes
rcmd - 3    : yabai -m space --focus   03_space_radar
rcmd - 4    : yabai -m space --focus   04_space_calendar
rcmd - 5    : yabai -m space --focus   05_space_monitor
rcmd - 6    : yabai -m space --focus   06_space_docs
rcmd - 7    : yabai -m space --focus   07_space_mail
rcmd - 8    : yabai -m space --focus   08_space_chrome
rcmd - 9    : yabai -m space --focus   09_space_safari
rcmd - 0    : yabai -m space --focus   10_space_music
rcmd - f1   : yabai -m space --focus   11_space_code
rcmd - f2   : yabai -m space --focus   12_space_xcode
rcmd - f3   : yabai -m space --focus   13_space_finder
rcmd - f4   : yabai -m space --focus   14_space_ptb
rcmd - f5   : yabai -m space --focus   15_space_webex
rcmd - f6   : yabai -m space --focus   16_space_logs
rcmd - f7   : yabai -m space --focus   17_space_unk17
rcmd - f8   : yabai -m space --focus   18_space_unk18
rcmd - f9   : yabai -m space --focus   19_space_slack
rcmd - f10  : yabai -m space --focus   20_space_whatsapp

# Move windows between spaces
rcmd + shift - 1 :  yabai -m window --space     01_space_iterm     ; yabai -m space --focus 01_space_iterm
rcmd + shift - 2 :  yabai -m window --space     02_space_notes     ; yabai -m space --focus 02_space_notes
rcmd + shift - 3 :  yabai -m window --space     03_space_radar     ; yabai -m space --focus 03_space_radar
rcmd + shift - 4 :  yabai -m window --space     04_space_calendar  ; yabai -m space --focus 04_space_calendar
rcmd + shift - 5 :  yabai -m window --space     05_space_monitor   ; yabai -m space --focus 05_space_unk5
rcmd + shift - 6 :  yabai -m window --space     06_space_docs      ; yabai -m space --focus 06_space_docs
rcmd + shift - 7 :  yabai -m window --space     07_space_mail      ; yabai -m space --focus 07_space_mail
rcmd + shift - 8 :  yabai -m window --space     08_space_chrome    ; yabai -m space --focus 08_space_chrome
rcmd + shift - 9 :  yabai -m window --space     09_space_safari    ; yabai -m space --focus 09_space_safari
rcmd + shift - 0 :  yabai -m window --space     10_space_music     ; yabai -m space --focus 10_space_music
rcmd + shift - f1 : yabai -m window --space     11_space_code      ; yabai -m space --focus 11_space_code
rcmd + shift - f2 : yabai -m window --space     12_space_xcode     ; yabai -m space --focus 12_space_xcode
rcmd + shift - f3 : yabai -m window --space     13_space_finder    ; yabai -m space --focus 13_space_finder
rcmd + shift - f4 : yabai -m window --space     14_space_ptb       ; yabai -m space --focus 14_space_ptb
rcmd + shift - f5 : yabai -m window --space     15_space_webex     ; yabai -m space --focus 15_space_webex
rcmd + shift - f6 : yabai -m window --space     16_space_logs      ; yabai -m space --focus 16_space_logs
rcmd + shift - f7 : yabai -m window --space     17_space_unk17     ; yabai -m space --focus 17_space_unk17
rcmd + shift - f8 : yabai -m window --space     18_space_unk18     ; yabai -m space --focus 18_space_unk18
rcmd + shift - f9 : yabai -m window --space     19_space_slack     ; yabai -m space --focus 19_space_slack
rcmd + shift - f10 : yabai -m window --space    20_space_whatsapp  ; yabai -m space --focus 20_space_whatsapp

# Reload yabairc
rcmd + lcmd + shift - r : "${HOME}/.yabairc"
rcmd + shift - r : brew services restart yabai

# focus monitor
rcmd + alt - z     : yabai -m display --focus prev
rcmd + alt - left  : yabai -m display --focus prev
rcmd + alt - right : yabai -m display --focus next
rcmd + alt - 1  : yabai -m display --focus 1
rcmd + alt - 2  : yabai -m display --focus 2
rcmd + alt - 3  : yabai -m display --focus 3

# Move space to monitor
rcmd + lcmd + alt + shift - 1 : yabai -m space --display 1; yabai -m display --focus 1
rcmd + lcmd + alt + shift - 2 : yabai -m space --display 2; yabai -m display --focus 2
rcmd + lcmd + alt + shift - 3 : yabai -m space --display 3; yabai -m display --focus 3

# send window to monitor and follow focus
rcmd + alt + shift - right : yabai -m window --display next; yabai -m display --focus next
rcmd + alt + shift - left  : yabai -m window --display perv; yabai -m display --focus prev
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1


# ~~~~~~~~~~ Resize mode ~~~~~~~~~~~~
# add an on_enter command to the default mode
:: default : yabai -m config active_window_border_color 0xff52caeb
#
# defines a new mode 'resize' with an on_enter command, that captures keypresses
:: resize @ : yabai -m config active_window_border_color 0xfffc0303

# Mode switches
rcmd - r ; resize
resize < rcmd - r ; default

# Resize keybindings
resize < right : yabai -m window --resize right:20:0  || yabai -m window --resize left:20:0
resize < left  : yabai -m window --resize right:-20:0 || yabai -m window --resize left:-20:0
resize < up    : yabai -m window --resize top:0:-20   || yabai -m window --resize bottom:0:-20
resize < down  : yabai -m window --resize top:0:20    || yabai -m window --resize bottom:0:20
# Faster
resize < shift - right : yabai -m window --resize right:120:0  || yabai -m window --resize left:120:0
resize < shift - left  : yabai -m window --resize right:-120:0 || yabai -m window --resize left:-120:0
resize < shift - up    : yabai -m window --resize top:0:-120   || yabai -m window --resize bottom:0:-120
resize < shift - down  : yabai -m window --resize top:0:120    || yabai -m window --resize bottom:0:120

# ~~~~~~~~ END Resize mode ~~~~~~~~~~


# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
rcmd - t : yabai -m window --toggle float --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky --toggle topmost --toggle pip

# Stack / tiling layout
rcmd - e : yabai -m space --layout bsp
rcmd - s : yabai -m space --layout stack


# Change focus of windows
rcmd - down : yabai -m window --focus stack.next || yabai -m window --focus south
rcmd - up : yabai -m window --focus stack.prev || yabai -m window --focus north
rcmd - left : yabai -m window --focus west
rcmd - right : yabai -m window --focus east




######### i3wm setup ##########

# ctrl - e : yabai -m space --layout bsp
# ctrl - s : yabai -m space --layout stack

# ctrl - down : yabai -m window --focus stack.next || yabai -m window --focus south
# ctrl - up : yabai -m window --focus stack.prev || yabai -m window --focus north
# ctrl + alt - left : yabai -m window --focus west
# ctrl + alt - right : yabai -m window --focus east

# ctrl - 1 : yabai -m space --focus 1
# ctrl - 2 : yabai -m space --focus 2
# ctrl - 3 : yabai -m space --focus 3
# ctrl - 4 : yabai -m space --focus 4
# ctrl - 5 : yabai -m space --focus 5
# ctrl - 6 : yabai -m space --focus 6

# ctrl + shift - 1 : yabai -m window --space 1
# ctrl + shift - 2 : yabai -m window --space 2
# ctrl + shift - 3 : yabai -m window --space 3
# ctrl + shift - 4 : yabai -m window --space 4
# ctrl + shift - 5 : yabai -m window --space 5
# ctrl + shift - 6 : yabai -m window --space 6

# ctrl - f : yabai -m window --toggle float


